/*! Angular-PDF Version: 2.1.0 | Released under an MIT license */
/* globals Waypoint */
!function(){"use strict";angular.module("pdf",[]).directive("ngPdf",["$window","$timeout",function($window,$timeout){var renderTask=[],pdfLoaderTask=null,debug=!1,backingScale=function(canvas){var ctx=canvas.getContext("2d"),dpr=window.devicePixelRatio||1,bsr=ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1;return dpr/bsr},setCanvasDimensions=function(canvas,w,h){var ratio=backingScale(canvas);return canvas.width=Math.floor(w*ratio),canvas.height=Math.floor(h*ratio),canvas.style.width=Math.floor(w)+"px",canvas.style.height=Math.floor(h)+"px",canvas.getContext("2d").setTransform(ratio,0,0,ratio,0,0),canvas};return{restrict:"E",templateUrl:function(element,attr){return attr.templateUrl?attr.templateUrl:"partials/viewer.html"},link:function(scope,element,attrs){function renderPDF(){(url&&url.length||data&&data.byteLength>0)&&(pdfLoaderTask=PDFJS.getDocument(data&&data.byteLength>0?// data takes preference
{data:data,withCredentials:creds}:// if not, load the url
{url:url,withCredentials:creds},null,null,scope.onProgress),pdfLoaderTask.then(function(_pdfDoc){"function"==typeof scope.onLoad&&scope.onLoad(),pdfDoc=_pdfDoc,scope.$apply(function(){scope.pageCount=_pdfDoc.numPages;for(var pageIDs=[],i=1;i<=scope.pageCount;i+=1)pageIDs.push(canvasContId+i);scope.pageIDs=pageIDs}),$timeout(function(){scope.renderAllPages()})},function(error){error&&"function"==typeof scope.onError&&scope.onError(error)}))}element.css("display","block");
// scope alias if constructorAs is used
var alias=attrs.alias,url=alias?scope[alias].pdfUrl:scope.pdfUrl,data=alias?scope[alias].pdfData:scope.pdfData,pdfDoc=null,pageToDisplay=isFinite(attrs.page)?parseInt(attrs.page):1,pageFit="page-fit"===attrs.scale,scale=pageFit?1:parseInt(attrs.scale),canvasContId=attrs.containerid||"pdf-container";scope.pageIDs=[],scope.canvasClass="rotate0";
// array of waypoints to detect scrolling
var waypoints=[];debug=attrs.hasOwnProperty("debug")?attrs.debug:!1;var creds=attrs.usecredentials,windowEl=angular.element($window);windowEl.on("scroll",function(){scope.$apply(function(){scope.scroll=windowEl[0].scrollY})}),PDFJS.disableWorker=!0,scope.pageNum=pageToDisplay,scope.renderPage=function(num){renderTask[num]&&renderTask[num]._internalRenderTask.cancel(),pdfDoc.getPage(num).then(function(page){var viewport,pageWidthScale,renderContext;if(pageFit){viewport=page.getViewport(1);var clientRect=element[0].getBoundingClientRect();pageWidthScale=clientRect.width/viewport.width,scale=pageWidthScale}viewport=page.getViewport(scale);
// pageIDs has index starting at 0
var canvas=document.getElementById(scope.pageIDs[num-1]),ctx=canvas.getContext("2d");setCanvasDimensions(canvas,viewport.width,viewport.height),waypoints[num-1]=new Waypoint({element:canvas,handler:function(){scope.pageNum=num}}),renderContext={canvasContext:ctx,viewport:viewport},renderTask=page.render(renderContext),renderTask.promise.then(function(){"function"==typeof scope.onPageRender&&scope.onPageRender()})["catch"](function(reason){console.log(reason)})})},/**
         * Renders all the pages
         * @return {[type]} [description]
         */
scope.renderAllPages=function(){for(var i=1;i<=scope.pageCount;i+=1)scope.renderPage(i)},scope.zoomIn=function(){return pageFit=!1,scale=parseFloat(scale)+.2,scope.renderAllPages(),scale},scope.zoomOut=function(){return pageFit=!1,scale=parseFloat(scale)-.2,scope.renderAllPages(),scale},scope.fit=function(){pageFit=!0,scope.renderAllPages()},scope.rotate=function(){switch(scope.canvasClass){case"rotate0":scope.canvasClass="rotate90";break;case"rotate90":scope.canvasClass="rotate180";break;case"rotate180":scope.canvasClass="rotate270";break;case"rotate270":scope.canvasClass="rotate0"}},
// Function to reload the pdf cleanly.
scope.cleanReload=function(){scope.pageNum=scope.pageToDisplay=pageToDisplay,pdfLoaderTask?pdfLoaderTask.destroy().then(function(){renderPDF()}):renderPDF()},
// Watch for changes of the URL
scope.$watch("pdfUrl",function(newVal){""!==newVal&&(debug&&console.log("pdfUrl value change detected: ",scope.pdfUrl),url=newVal,scope.cleanReload())})}}}])}();